{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = series;\nvar _process = require('process');\nvar _process2 = _interopRequireDefault(_process);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction series(tasks, cb) {\n  var results = [];\n  var current = 0;\n  var isSync = true;\n  function done(err) {\n    function end() {\n      if (cb) cb(err, results);\n    }\n    if (isSync) _process2.default.nextTick(end);else end();\n  }\n  function each(err, result) {\n    results.push(result);\n    if (++current >= tasks.length || err) done(err);else tasks[current](each);\n  }\n  if (tasks.length > 0) tasks[0](each);else done(null);\n  isSync = false;\n} /**\n   * Run the functions in the tasks array in series, each one running once the previous function has completed.\n   * If any functions in the series pass an error to its callback, no more functions are run,\n   * and callback is immediately called with the value of the error. Otherwise, callback receives an array of results\n   * when tasks have completed.\n   * Taken from https://github.com/feross/run-series\n   *\n   * @params {Array} tasks An array containing functions to run, each function is passed a callback(err, result) which it must call on completion with an error err (which can be null) and an optional result value.\n   * @params {Function} callback(err, results) - An optional callback to run once all the functions have completed. This function gets a results array containing all the result arguments passed to the task callbacks.\n   */","map":{"version":3,"names":["Object","defineProperty","exports","value","default","series","_process","require","_process2","_interopRequireDefault","obj","__esModule","tasks","cb","results","current","isSync","done","err","end","nextTick","each","result","push","length"],"sources":["C:/Users/pedro/OneDrive/Área de Trabalho/docs/calculator/node_modules/react-textfit/lib/utils/series.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = series;\n\nvar _process = require('process');\n\nvar _process2 = _interopRequireDefault(_process);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction series(tasks, cb) {\n    var results = [];\n    var current = 0;\n    var isSync = true;\n\n    function done(err) {\n        function end() {\n            if (cb) cb(err, results);\n        }\n        if (isSync) _process2.default.nextTick(end);else end();\n    }\n\n    function each(err, result) {\n        results.push(result);\n        if (++current >= tasks.length || err) done(err);else tasks[current](each);\n    }\n\n    if (tasks.length > 0) tasks[0](each);else done(null);\n\n    isSync = false;\n} /**\n   * Run the functions in the tasks array in series, each one running once the previous function has completed.\n   * If any functions in the series pass an error to its callback, no more functions are run,\n   * and callback is immediately called with the value of the error. Otherwise, callback receives an array of results\n   * when tasks have completed.\n   * Taken from https://github.com/feross/run-series\n   *\n   * @params {Array} tasks An array containing functions to run, each function is passed a callback(err, result) which it must call on completion with an error err (which can be null) and an optional result value.\n   * @params {Function} callback(err, results) - An optional callback to run once all the functions have completed. This function gets a results array containing all the result arguments passed to the task callbacks.\n   */"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,MAAM;AAExB,IAAIC,QAAQ,GAAGC,OAAO,CAAC,SAAS,CAAC;AAEjC,IAAIC,SAAS,GAAGC,sBAAsB,CAACH,QAAQ,CAAC;AAEhD,SAASG,sBAAsBA,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEN,OAAO,EAAEM;EAAI,CAAC;AAAE;AAE9F,SAASL,MAAMA,CAACO,KAAK,EAAEC,EAAE,EAAE;EACvB,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,OAAO,GAAG,CAAC;EACf,IAAIC,MAAM,GAAG,IAAI;EAEjB,SAASC,IAAIA,CAACC,GAAG,EAAE;IACf,SAASC,GAAGA,CAAA,EAAG;MACX,IAAIN,EAAE,EAAEA,EAAE,CAACK,GAAG,EAAEJ,OAAO,CAAC;IAC5B;IACA,IAAIE,MAAM,EAAER,SAAS,CAACJ,OAAO,CAACgB,QAAQ,CAACD,GAAG,CAAC,CAAC,KAAKA,GAAG,EAAE;EAC1D;EAEA,SAASE,IAAIA,CAACH,GAAG,EAAEI,MAAM,EAAE;IACvBR,OAAO,CAACS,IAAI,CAACD,MAAM,CAAC;IACpB,IAAI,EAAEP,OAAO,IAAIH,KAAK,CAACY,MAAM,IAAIN,GAAG,EAAED,IAAI,CAACC,GAAG,CAAC,CAAC,KAAKN,KAAK,CAACG,OAAO,CAAC,CAACM,IAAI,CAAC;EAC7E;EAEA,IAAIT,KAAK,CAACY,MAAM,GAAG,CAAC,EAAEZ,KAAK,CAAC,CAAC,CAAC,CAACS,IAAI,CAAC,CAAC,KAAKJ,IAAI,CAAC,IAAI,CAAC;EAEpDD,MAAM,GAAG,KAAK;AAClB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}